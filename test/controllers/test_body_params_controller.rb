# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

require_relative 'controller_test_base'

class BodyParamsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def self.startup
    self.controller = @@api_client.body_params
  end

  # Todo: Add description for test test_receive_unix_timestamp_exception
  def test_receive_unix_timestamp_exception()

    # Perform the API call through the SDK function
    assert_raise('UnixTimeStampException'){ 
      result = self.class.controller.get_receive_exception_with_unixtimestamp_exception()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

  # Todo: Add description for test test_send_optional_unix_time_stamp_in_nested_model_body
  def test_send_optional_unix_time_stamp_in_nested_model_body()
    # Parameters for the API call
    date_time = SendUnixDateTime.from_hash(JSON.parse('{"dateTime":{"dateTime":1484719381}}'))

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_optional_unix_time_stamp_in_nested_model_body(date_time)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_optional_unix_time_stamp_in_body_1
  def test_send_optional_unix_time_stamp_in_body_1()
    # Parameters for the API call
    date_time = nil

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_optional_unix_date_time_in_body(date_time)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_optional_unix_time_stamp_in_body
  def test_send_optional_unix_time_stamp_in_body()
    # Parameters for the API call
    date_time = Time.at(1484719381).utc.to_datetime

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_optional_unix_date_time_in_body(date_time)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_receive_rfc_1123_exception
  def test_receive_rfc_1123_exception()

    # Perform the API call through the SDK function
    assert_raise('Rfc1123Exception'){ 
      result = self.class.controller.get_receive_exception_with_rfc_1123_datetime()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

  # Todo: Add description for test test_send_optional_rfc_1123_in_body_1
  def test_send_optional_rfc_1123_in_body_1()
    # Parameters for the API call
    body = nil

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_optional_rfc_1123_in_body(body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_optional_rfc_1123_in_body
  def test_send_optional_rfc_1123_in_body()
    # Parameters for the API call
    body = DateTime.httpdate('Sun, 06 Nov 1994 08:49:37 GMT')

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_optional_rfc_1123_in_body(body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_test_sending_null_datetime_in_plain_text_body
  def test_test_sending_null_datetime_in_plain_text_body()
    # Parameters for the API call
    body = nil

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_datetime_optional_in_endpoint(body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_test_sending_datetime_as_optional_in_plain_text_body
  def test_test_sending_datetime_as_optional_in_plain_text_body()
    # Parameters for the API call
    body = DateTime.rfc3339('1994-02-13T14:01:54.9571247Z')

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_datetime_optional_in_endpoint(body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_test_rfc_3339_date_time_exception
  def test_test_rfc_3339_date_time_exception()

    # Perform the API call through the SDK function
    assert_raise('ExceptionWithRfc3339DateTimeException'){ 
      result = self.class.controller.get_receive_exception_with_rfc_3339_datetime()
    }

    # Test response code
    assert_equal(@response_catcher.response.status_code, 444)
  end

  # Todo: Add description for test test_send_optional_unix_date_time_in_model_body
  def test_send_optional_unix_date_time_in_model_body()
    # Parameters for the API call
    date_time = nil

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_optional_unix_time_stamp_in_model_body(date_time)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_optional_unix_time_stamp_in_model_body
  def test_send_optional_unix_time_stamp_in_model_body()
    # Parameters for the API call
    date_time = UnixDateTime.from_hash(JSON.parse('{"dateTime":1484719381}'))

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_optional_unix_time_stamp_in_model_body(date_time)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_test_sending_rfc_1123_date_time_in_nested_mode_1
  def test_test_sending_rfc_1123_date_time_in_nested_mode_1()
    # Parameters for the API call
    body = nil

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_rfc_1123_date_time_in_nested_model(body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_test_sending_rfc_1123_date_time_in_nested_mode
  def test_test_sending_rfc_1123_date_time_in_nested_mode()
    # Parameters for the API call
    body = SendRfc1123DateTime.from_hash(JSON.parse('{"dateTime":{"dateTime":"Sun, 06 Nov 1994 08:49:37 GMT"}}'))

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_rfc_1123_date_time_in_nested_model(body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_rfc_1123_date_time_in_model_body
  def test_send_rfc_1123_date_time_in_model_body()
    # Parameters for the API call
    date_time = nil

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_rfc_1123_date_time_in_model(date_time)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_optional_rfc_1123_date_time_in_model_body
  def test_send_optional_rfc_1123_date_time_in_model_body()
    # Parameters for the API call
    date_time = ModelWithOptionalRfc1123DateTime.from_hash(JSON.parse('{"dateTime":"Sun, 06 Nov 1994 08:49:37 GMT"}'))

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_rfc_1123_date_time_in_model(date_time)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_null_model_in_body
  def test_send_null_model_in_body()
    # Parameters for the API call
    body = nil

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_optional_datetime_in_model(body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_optional_datetime_in_model_as_body
  def test_send_optional_datetime_in_model_as_body()
    # Parameters for the API call
    body = ModelWithOptionalRfc3339DateTime.from_hash(JSON.parse('{"dateTime":"1994-02-13T14:01:54.9571247Z"}'))

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_optional_datetime_in_model(body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_null_nested_model_in_body
  def test_send_null_nested_model_in_body()
    # Parameters for the API call
    body = nil

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_rfc_339_date_time_in_nested_models(body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_rfc_3339_date_time_in_nested_model
  def test_send_rfc_3339_date_time_in_nested_model()
    # Parameters for the API call
    body = SendRfc339DateTime.from_hash(JSON.parse('{"dateTime":{"dateTime":"1994-02-13T14:01:54.9571247Z"}}'))

    # Perform the API call through the SDK function
    result = self.class.controller.create_send_rfc_339_date_time_in_nested_models(body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    expected_body = JSON.parse('{"passed":true}')
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

end
